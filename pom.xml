<?xml version="1.0" encoding="UTF-8"?>
<!--   Copyright (C) 2013-2014 Computer Sciences Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License. -->

<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>amino</groupId>
  <artifactId>amino-app</artifactId>
  <version>2.3.0</version>
  <packaging>war</packaging>

  <parent>
    <groupId>com._42six.amino</groupId>
    <artifactId>amino-parent</artifactId>
    <version>2.3.0</version>
  </parent>
  <properties>
      <amino.version>2.3.0</amino.version>
      <hadoop.mr1.version>2.0.0-mr1-cdh4.5.0</hadoop.mr1.version>
      <hadoop.version>2.2.0</hadoop.version>
  </properties>
  
  <dependencies>
    <dependency>
      <groupId>com._42six.amino.core</groupId>
      <artifactId>amino-common</artifactId>
      <version>${amino.version}</version>
      <exclusions>
            <exclusion><groupId>org.slf4j</groupId><artifactId>slf4j-log4j12</artifactId></exclusion>
      </exclusions>
    </dependency>
    <dependency>
      <groupId>com._42six.amino.impl</groupId>
      <artifactId>amino-accumulo-query-api</artifactId>
      <version>${amino.version}</version>
      <exclusions>
            <exclusion><groupId>org.slf4j</groupId><artifactId>slf4j-log4j12</artifactId></exclusion>
      </exclusions>
    </dependency>
    <dependency>
      <groupId>org.apache.hadoop</groupId>
      <artifactId>hadoop-core</artifactId>
      <version>${hadoop.mr1.version}</version>
      <scope>compile</scope>
      <exclusions>
            <exclusion><groupId>log4j</groupId><artifactId>log4j</artifactId></exclusion>
            <exclusion><groupId>org.slf4j</groupId><artifactId>slf4j-log4j12</artifactId></exclusion>
      </exclusions>
    </dependency>
    <dependency>
      <groupId>org.apache.hadoop</groupId>
      <artifactId>hadoop-common</artifactId>
      <version>${hadoop.version}</version>
      <scope>compile</scope>
      <exclusions>
          <exclusion><groupId>log4j</groupId><artifactId>log4j</artifactId></exclusion>
          <exclusion><groupId>org.slf4j</groupId><artifactId>slf4j-log4j12</artifactId></exclusion>
      </exclusions>
    </dependency>
  </dependencies>
  <build>
    <finalName>amino</finalName>
    <plugins>
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>exec-maven-plugin</artifactId>
        <executions>
          <execution>
            <!-- This tasks only creates a basic structure
            expected by maven,
            so it can do its work -->
            <id>create-mock-web-descriptor</id>
            <phase>compile</phase>
            <configuration>
              <executable>/bin/sh</executable>
              <workingDirectory>.</workingDirectory>
              <arguments>
                <argument>-c</argument>
                <argument>
                  mkdir -p src/main/webapp/WEB-INF
                  touch src/main/webapp/WEB-INF/web.xml
                </argument>
              </arguments>
            </configuration>
            <goals>
              <goal>exec</goal>
            </goals>
          </execution>
          <execution>
            <!-- Now in the package phase we copy the
            jar files that maven put into the fake
            web app to our rails' lib folder -->
            <id>copy-needed-jars-into-lib</id>
            <phase>package</phase>
            <configuration>
              <executable>/bin/sh</executable>
              <workingDirectory>.</workingDirectory>
              <arguments>
                <argument>-c</argument>
                <argument>
                  rm -f lib/jars/*.jar
                  cp target/amino/WEB-INF/lib/*.jar lib/jars
                  rm -rf target/amino*
                  rm -rf src
                </argument>
              </arguments>
            </configuration>
            <goals>
              <goal>exec</goal>
            </goals>
          </execution>
          <execution>
            <!-- Here we optionally create the final war file
            containing our rails app using warbler,
            doing a small cleanup of the files
            and folders maven created  -->
            <id>create-final-war</id>
            <phase>package</phase>
            <configuration>
              <executable>/bin/sh</executable>
              <workingDirectory>.</workingDirectory>
              <arguments>
                <argument>-c</argument>
                <argument>
                  rm -rf *.war tmp/war
                  jruby -S bundle exec warble
                  mv *.war target/amino.war
                </argument>
              </arguments>
            </configuration>
            <goals>
              <goal>exec</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
    </plugins>
  </build>
</project>
